const express = require('express');
const cors = require('cors');
require('dotenv').config();
const fetch = require('node-fetch');

const app = express();
const port = 8000;
const apiKey = process.env.ARLIAI_API_KEY;

app.use(cors());
app.use(express.json());

async function fetchColormindPalette(baseColors) {
  try {
    const requestBody = JSON.stringify({ model: 'default', input: baseColors.concat(["N", "N"]) });
    const requestUrl = 'http://colormind.io/api/';
    console.log('Sending request to Colormind API URL:', requestUrl);
    console.log('Request Body:', requestBody);

    const response = await fetch(requestUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: requestBody,
    });

    const responseText = await response.text(); 

    console.log('Raw response from Colormind API:', responseText);

    if (!response.ok) {
      console.error(`Error fetching from Colormind, status: ${response.status}`);
      return [];
    }

    if (responseText.includes("<html>") || responseText.includes("<body>")) {
      console.error('Received an HTML response instead of JSON from Colormind API');
      return [];
    }

    try {
      const data = JSON.parse(responseText);
      console.log('Colormind API response:', data);
      return data.result || [];
    } catch (jsonError) {
      console.error('Error parsing Colormind response as JSON:', jsonError);
      return [];
    }
  } catch (error) {
    console.error('Error fetching from Colormind:', error);
    return [];
  }
}

// Helper function to convert HEX to RGB
function hexToRgb(hex) {
  let r = 0, g = 0, b = 0;
  if (hex.length === 4) {
    r = parseInt(hex[1] + hex[1], 16);
    g = parseInt(hex[2] + hex[2], 16);
    b = parseInt(hex[3] + hex[3], 16);
  } else if (hex.length === 7) {
    r = parseInt(hex[1] + hex[2], 16);
    g = parseInt(hex[3] + hex[4], 16);
    b = parseInt(hex[5] + hex[6], 16);
  }
  return [r, g, b];
}

app.post('/api/generate-palette', async (req, res) => {
  try {
    const { prompt } = req.body;
    if (!prompt) {
      return res.status(400).json({ error: 'Prompt is required' });
    }

    console.log('Received prompt:', prompt);
    
    // Update the prompt to request RGB values
    const formattedPrompt = `Provide exactly three RGB color values suitable for a website. Format each color as [R, G, B]. Only return the RGB values, nothing else.`;
    const payload = {
      model: "allura-org/Qwen2.5-72b-RP-Ink",
      prompt: formattedPrompt,
      repetition_penalty: 1.1,
      temperature: 0.7,
      top_p: 0.9,
      top_k: 40,
      max_tokens: 50,
      stream: false
    };

    console.log('Sending request to ArliAI API...');
    const response = await fetch('https://api.arliai.com/v1/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('Error from Arli AI API:', errorData);
      return res.status(500).json({ error: 'Failed to generate base colors' });
    }

    const data = await response.json();
    console.log('Response from Arli AI:', data);

    const generatedText = data.choices?.[0]?.text?.trim();
    if (!generatedText) {
      return res.status(500).json({ error: 'No text generated by the API' });
    }

    // Extract RGB values
    const baseColors = (generatedText.match(/\[([0-9]{1,3}),\s?([0-9]{1,3}),\s?([0-9]{1,3})\]/g) || []).slice(0, 3);
    if (baseColors.length !== 3) {
      return res.status(500).json({ error: 'Insufficient valid color codes found in the response' });
    }

    // Convert RGB string arrays into actual arrays
    const rgbColors = baseColors.map(color => {
      return color
        .slice(1, -1)
        .split(',')
        .map(c => parseInt(c.trim(), 10));
    });

    console.log('Base colors from Arli AI:', rgbColors);
    const extendedPalette = await fetchColormindPalette(rgbColors);
    
    res.json({
      baseColors: rgbColors,
      fullPalette: extendedPalette.length ? extendedPalette : rgbColors
    });

  } catch (error) {
    console.error('Error:', error);
    res.status(500).json({ error: 'Failed to generate color palette' });
  }
});

app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
