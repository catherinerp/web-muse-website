const express = require('express');
const cors = require('cors');
require('dotenv').config();
const fetch = require('node-fetch');

const app = express();
const port = 8000;
const apiKey = process.env.ARLIAI_API_KEY;

app.use(cors());
app.use(express.json());

app.post('/api/generate-palette', async (req, res) => {
  try {
    const { prompt } = req.body;

    if (!prompt) {
      return res.status(400).json({ error: 'Prompt is required' });
    }

    const formattedPrompt = `Provide exactly five hex color codes based on the description: "${prompt}". Only return the hex codes, nothing else.`;

    const payload = {
      model: "Qwen2.5-32B-EVA-v0.2",
      prompt: formattedPrompt,
      repetition_penalty: 1.1,
      temperature: 0.7,
      top_p: 0.9,
      top_k: 40,
      max_tokens: 100,
      stream: false
    };

    const response = await fetch('https://api.arliai.com/v1/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('Error from Arli AI API:', errorData);
      if (errorData.error && errorData.error.type === 'authentication_error') {
        return res.status(401).json({ error: 'Invalid or missing API key' });
      }
      return res.status(500).json({ error: 'Failed to generate color palette' });
    }

    const data = await response.json();
    console.log('Response from Arli AI:', data);

    const generatedText = data.choices?.[0]?.text?.trim();

    if (!generatedText) {
      return res.status(500).json({ error: 'No text generated by the API' });
    }

    const colorMatches = generatedText.match(/#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})/g) || [];
    if (colorMatches.length === 0) {
      return res.status(500).json({ error: 'No valid color codes found in the response' });
    }

    res.json({
      generatedText,
      palette: colorMatches
    });

  } catch (error) {
    console.error('Error:', error);
    res.status(500).json({ error: 'Failed to generate color palette' });
  }
});

app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
