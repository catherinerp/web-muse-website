{"ast":null,"code":"var _jsxFileName = \"/Users/catherinepebenito/Documents/Dev/web-muse-website/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [palette, setPalette] = useState([]);\n\n  // Fetch the random color palette when the component mounts\n  useEffect(() => {\n    // Fetch a random color palette from the Colormind API\n    const fetchPalette = async () => {\n      try {\n        const response = await fetch('http://colormind.io/api/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            model: 'default'\n          })\n        });\n        const data = await response.json();\n        setPalette(data.result); // Store the color palette in state\n      } catch (error) {\n        console.error('Error fetching color palette:', error);\n      }\n    };\n    fetchPalette();\n  }, []); // Empty dependency array ensures it only runs once after mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center p-4 bg-gray-100 min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-4xl font-bold text-indigo-600 mb-6\",\n      children: \"WebMuse\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap gap-4\",\n      children: palette.length > 0 ? palette.map((color, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-32 h-32 rounded-lg\",\n        style: {\n          backgroundColor: `rgb(${color.join(',')})`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AK3OpyGaqbJbLFqxFuvCitwU0CU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","palette","setPalette","fetchPalette","response","fetch","method","headers","body","JSON","stringify","model","data","json","result","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","color","index","style","backgroundColor","join","_c","$RefreshReg$"],"sources":["/Users/catherinepebenito/Documents/Dev/web-muse-website/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './index.css';\n\nfunction App() {\n  const [palette, setPalette] = useState([]);\n\n  // Fetch the random color palette when the component mounts\n  useEffect(() => {\n    // Fetch a random color palette from the Colormind API\n    const fetchPalette = async () => {\n      try {\n        const response = await fetch('http://colormind.io/api/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ model: 'default' }),\n        });\n\n        const data = await response.json();\n        setPalette(data.result); // Store the color palette in state\n      } catch (error) {\n        console.error('Error fetching color palette:', error);\n      }\n    };\n\n    fetchPalette();\n  }, []); // Empty dependency array ensures it only runs once after mount\n\n  return (\n    <div className=\"flex flex-col items-center justify-center p-4 bg-gray-100 min-h-screen\">\n      {/* Heading */}\n      <h1 className=\"text-4xl font-bold text-indigo-600 mb-6\">WebMuse</h1>\n\n      {/* Color Palette Display */}\n      <div className=\"flex flex-wrap gap-4\">\n        {palette.length > 0 ? (\n          palette.map((color, index) => (\n            <div\n              key={index}\n              className=\"w-32 h-32 rounded-lg\"\n              style={{ backgroundColor: `rgb(${color.join(',')})` }}\n            />\n          ))\n        ) : (\n          <p>Loading...</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACAC,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0BAA0B,EAAE;UACvDC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,KAAK,EAAE;UAAU,CAAC;QAC3C,CAAC,CAAC;QAEF,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QAClCX,UAAU,CAACU,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC;MAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IAEDZ,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAKmB,SAAS,EAAC,wEAAwE;IAAAC,QAAA,gBAErFpB,OAAA;MAAImB,SAAS,EAAC,yCAAyC;MAAAC,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGpExB,OAAA;MAAKmB,SAAS,EAAC,sBAAsB;MAAAC,QAAA,EAClCjB,OAAO,CAACsB,MAAM,GAAG,CAAC,GACjBtB,OAAO,CAACuB,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACvB5B,OAAA;QAEEmB,SAAS,EAAC,sBAAsB;QAChCU,KAAK,EAAE;UAAEC,eAAe,EAAE,OAAOH,KAAK,CAACI,IAAI,CAAC,GAAG,CAAC;QAAI;MAAE,GAFjDH,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGX,CACF,CAAC,gBAEFxB,OAAA;QAAAoB,QAAA,EAAG;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IACjB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACtB,EAAA,CA/CQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAiDZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}